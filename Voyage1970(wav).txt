using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using NAudio.Wave;

namespace RhythmGame
{
    public partial class RhythmGameForm : Form
    {
        private List<Note> notes;
        private int score;
        private Timer noteTimer;
        private WaveOutEvent waveOut;
        private AudioFileReader audioFile;

        private const int NumZones = 4; // 구역의 수
        private const int ZoneWidth = 200; // 각 구역의 너비

        public RhythmGameForm()
        {
            InitializeComponent();
            InitializeGame();
            InitializeUI();
            LoadMusic();
        }

        private void InitializeGame()
        {
            notes = new List<Note>();
            score = 0;
        }

        private void InitializeUI()
        {
            Width = ZoneWidth * NumZones;
            Height = 400;
            KeyDown += RhythmGameForm_KeyDown;

            noteTimer = new Timer();
            noteTimer.Interval = 200;
            noteTimer.Tick += NoteTimer_Tick;
        }

        private void LoadMusic()
        {
            // MP3 파일을 WAV 파일로 변환 후 로드
            ConvertMp3ToWav(@"C:\Users\zduri\Desktop\음악\16. Voyage 1970.mp3", "output.wav");
            audioFile = new AudioFileReader("output.wav");
            waveOut = new WaveOutEvent();
            waveOut.DeviceNumber = 0;
            waveOut.Init(audioFile);

            StartGame();
        }

        private void ConvertMp3ToWav(string mp3FilePath, string outputWavFilePath)
        {
            using (var reader = new Mp3FileReader(mp3FilePath))
            {
                WaveFileWriter.CreateWaveFile(outputWavFilePath, reader);
            }
        }

        private void StartGame()
        {
            score = 0;
            notes.Clear();
            noteTimer.Start();
            waveOut.Play();
        }

        private void RhythmGameForm_KeyDown(object sender, KeyEventArgs e)
        {
            CheckInput(e.KeyCode);
        }

        private void NoteTimer_Tick(object sender, EventArgs e)
        {
            GenerateNote();
        }

        private void GenerateNote()
        {
            // 각 구역에 노트 생성
            for (int i = 0; i < NumZones; i++)
            {
                Note newNote = new Note()
                {
                    Location = new Point(i * ZoneWidth, 0),
                    Size = new Size(ZoneWidth, 20),
                    Speed = 5,
                    Color = Color.Blue,
                    Key = GetKeyForZone(i),
                };

                newNote.OnNoteRemove += (s, args) =>
                {
                    if (newNote.Bottom >= Height)
                    {
                        score++; // 노트가 성공적으로 플레이어에게 도착하면 점수 증가
                    }
                };

                notes.Add(newNote);
                Controls.Add(newNote);
            }
        }

        private Keys GetKeyForZone(int zoneIndex)
        {
            // 각 구역에 대응되는 키 반환
            switch (zoneIndex)
            {
                case 0: return Keys.A;
                case 1: return Keys.S;
                case 2: return Keys.J;
                case 3: return Keys.K;
                default: return Keys.None;
            }
        }

        private void CheckInput(Keys key)
        {
            // 해당 키에 대응되는 노트를 찾아서 처리
            Note noteToRemove = notes.Find(note => note.Key == key && note.Bottom >= Height - 50);

            if (noteToRemove != null)
            {
                notes.Remove(noteToRemove);
                Controls.Remove(noteToRemove);
            }
        }

        private class Note : PictureBox
        {
            public Keys Key { get; set; }
            public int Speed { get; set; }
            public Color Color { get; set; }

            public event EventHandler OnNoteRemove;

            public Note()
            {
                BackColor = Color;
                SizeMode = PictureBoxSizeMode.StretchImage;
                SetBounds(0, 0, ZoneWidth, 20);
            }

            protected override void OnMove(EventArgs e)
            {
                base.OnMove(e);

                if (Parent == null)
                    return;

                if (Bottom >= Parent.Height)
                {
                    OnNoteRemove?.Invoke(this, EventArgs.Empty);
                    Dispose();
                }
            }
        }
    }
}
