using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace RhythmGameForms
{
    public partial class DjMaxStyleGameForm : Form
    {
        private List<Note> notes;
        private int health;
        private int maxHealth = 10;
        private int wrongCount;
        private Random random;

        public DjMaxStyleGameForm()
        {
            InitializeComponent();
            InitializeGame();
            InitializeUI();
        }

        private void InitializeGame()
        {
            notes = new List<Note>();
            health = maxHealth;
            wrongCount = 0;

            Timer noteTimer = new Timer();
            noteTimer.Interval = 1000;
            noteTimer.Tick += NoteTimer_Tick;
            noteTimer.Start();

            random = new Random();
        }

        private void InitializeUI()
        {
            Width = 800;
            Height = 400;
            KeyDown += DjMaxStyleGameForm_KeyDown;

            GenerateNote();
        }

        private void NoteTimer_Tick(object sender, EventArgs e)
        {
            GenerateNote();
        }

        private void DjMaxStyleGameForm_KeyDown(object sender, KeyEventArgs e)
        {
            CheckInput(e.KeyCode);
        }
        private void Handel(Keys key)
        {
            // 사용자 입력에 해당하는 노트 찾아서 제거
            Note noteToRemove = notes.Find(note => (key == Keys.A || key == Keys.S || key == Keys.K || key == Keys.L) && note.Key == key && note.Bottom >= Height - 50);

            if (noteToRemove != null)
            {
                notes.Remove(noteToRemove);
                Controls.Remove(noteToRemove);
            }
        }
        private void GenerateNote()
        {
            Note newNote = new Note(random)
            {
                Location = new Point(random.Next(Width - 50), 0),
                Size = new Size(50, 20),
                Speed = random.Next(1, 5),
                Color = Color.Blue,
            };

            newNote.OnNoteRemove += (s, args) =>
            {
                if (newNote.Bottom >= Height)
                {
                    health--;
                    wrongCount++;

                    if (wrongCount >= 10)
                    {
                        GameOver();
                    }
                }
            };

            notes.Add(newNote);
            Controls.Add(newNote);
        }

        private void CheckInput(Keys key)
        {
            Note noteToRemove = notes.Find(note => note.Key == key && note.Bottom >= Height - 50);

            if (noteToRemove != null)
            {
                notes.Remove(noteToRemove);
                Controls.Remove(noteToRemove);
            }
        }

        private void GameOver()
        {
            MessageBox.Show("게임 오버!");
            // 게임 오버에 대한 추가 처리를 여기에 구현
            // 예를 들면 게임 리셋 또는 메인 화면으로 돌아가는 등
        }
    }

    public class Note : PictureBox
    {
        public Keys Key { get; set; }
        public int Speed { get; set; }
        public Color Color { get; set; }

        private Random random;

        public event EventHandler OnNoteRemove;

        public Note(Random random)
        {
            this.random = random;

            Key = (Keys)Enum.GetValues(typeof(Keys)).GetValue(random.Next(65, 90));
            BackColor = Color;
            SizeMode = PictureBoxSizeMode.StretchImage;
            SetBounds(0, 0, 50, 20);
        }

        protected override void OnMove(EventArgs e)
        {
            base.OnMove(e);

            if (Parent == null)
                return;

            if (Bottom >= Parent.Height)
            {
                OnNoteRemove?.Invoke(this, EventArgs.Empty);
                Dispose();
            }
        }
    }
}
