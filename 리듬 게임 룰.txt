using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace RhythmGame
{
    public partial class RhythmGameForm : Form
    {
        private List<Note> notes;
        private int score;
        private Timer noteTimer;

        private const int NumLines = 4;
        private const int LineWidth = 50;

        public RhythmGameForm()
        {
            InitializeComponent();
            InitializeGame();
            InitializeUI();
            StartGame();
        }

        private void InitializeGame()
        {
            notes = new List<Note>();
            score = 0;
        }

        private void InitializeUI()
        {
            Width = NumLines * LineWidth;
            Height = 400;
            KeyDown += RhythmGameForm_KeyDown;

            noteTimer = new Timer();
            noteTimer.Interval = 200; // 노트 생성 간격 (밀리초)
            noteTimer.Tick += NoteTimer_Tick;
        }

        private void StartGame()
        {
            noteTimer.Start();
        }

        private void RhythmGameForm_KeyDown(object sender, KeyEventArgs e)
        {
            CheckInput(e.KeyCode);
        }

        private void NoteTimer_Tick(object sender, EventArgs e)
        {
            GenerateNote();
        }

        private void GenerateNote()
        {
            Random random = new Random();
            int lineNumber = random.Next(NumLines);

            Note newNote = new Note(lineNumber)
            {
                Location = new Point(lineNumber * LineWidth, 0),
                Size = new Size(LineWidth, 20),
                Speed = 5,
                Color = Color.Blue,
            };

            newNote.OnNoteRemove += (s, args) =>
            {
                if (newNote.Bottom >= Height)
                {
                    score++; // 노트가 성공적으로 플레이어에게 도착하면 점수 증가
                }
            };

            notes.Add(newNote);
            Controls.Add(newNote);
        }

        private void CheckInput(Keys key)
        {
            int lineNumber = GetLineNumberForKey(key);

            if (lineNumber != -1)
            {
                Note noteToRemove = notes.Find(note => note.LineNumber == lineNumber && note.Bottom >= Height - 50);

                if (noteToRemove != null)
                {
                    notes.Remove(noteToRemove);
                    Controls.Remove(noteToRemove);
                }
            }
        }

        private int GetLineNumberForKey(Keys key)
        {
            switch (key)
            {
                case Keys.A: return 0;
                case Keys.B: return 1;
                case Keys.J: return 2;
                case Keys.K: return 3;
                default: return -1;
            }
        }

        private class Note : PictureBox
        {
            public int LineNumber { get; }
            public int Speed { get; set; }
            public Color Color { get; set; }

            public event EventHandler OnNoteRemove;

            public Note(int lineNumber)
            {
                LineNumber = lineNumber;
                BackColor = Color;
                SizeMode = PictureBoxSizeMode.StretchImage;
                SetBounds(0, 0, LineWidth, 20);
            }

            protected override void OnMove(EventArgs e)
            {
                base.OnMove(e);

                if (Parent == null)
                    return;

                if (Bottom >= Parent.Height)
                {
                    OnNoteRemove?.Invoke(this, EventArgs.Empty);
                    Dispose();
                }
            }
        }
    }
}
